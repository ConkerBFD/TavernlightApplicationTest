--Q1

local function releaseStorage(player)
player:setStorageValue(1000, -1)
end

function onLogout(player)
  if player:getStorageValue(1000) == 1 then
    addEvent(releaseStorage(player), 1000, player)
    --[[
    though technically legal for the function call, the lack of parameter in the releaseStorage call
    will assign nil to the player variable in the function itself
    --]]
    return false
  else
    return true
  end
  --The function would always return true no matter what, rendering the boolean value meaningless
end

--Q2

function printSmallGuildNames(memberCount)
-- this method is supposed to print names of all guilds that have less than memberCount max members
  local resultId = db.storeQuery(("SELECT 'name' FROM 'guilds' WHERE 'max_members' < %d;"):format(memberCount))
-- storing a string in a variable first is unnecessary as it is possible to do perform the query in one line
-- also the string itself lacked the single quote marks for the variable names
  local guildName = result.getString("name")
  print(guildName)
end

--Q3

function do_sth_with_PlayerParty(playerId, membername)
  player = Player(playerId)
  local party = player:getParty()

  if party == Player(membername):getParty() then
    party:removeMember(Player(membername))
    --instead of going through the whole list of party members, we can simply check if membername's party is the same as playerId's party
  end
end


--Q4

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
  Player* player = g_game.getPlayerByName(recipient);
  if (!player) 
    player = new Player(nullptr);
    if (!IOLoginData::loadPlayerByName(player, recipient)) {
      //player was not loaded, the player object that was created must therefore be deallocated as it is not used
      delete player;
      return;
    }
  }

  Item* item = Item::CreateItem(itemId);
  if (!item) {
    return;
  }

  g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

  if (player->isOffline()) {
    IOLoginData::savePlayer(player);
  }
}